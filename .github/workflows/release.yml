name: Build Tauri Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check_version
        run: |
          # Get the previous version
          git checkout HEAD~1 package.json 2>/dev/null || echo "First commit"
          PREV_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")

          # Restore current version
          git checkout HEAD package.json
          CURR_VERSION=$(node -p "require('./package.json').version")

          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURR_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged ($CURR_VERSION)"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build-tauri:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above)
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: vx.x.x

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install npm dependencies
        run: deno i

      - name: Build Tauri app
        run: |
          cd "${{ github.workspace }}"
          deno run tauri dev

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-macos-${{ contains(matrix.args, 'aarch64') && 'aarch64' || 'x86_64' }}
          path: |
            src-tauri/target/*/release/bundle/dmg/*.dmg
            src-tauri/target/*/release/bundle/macos/*.app
          if-no-files-found: error

  create-release:
    needs: [check-version, build-tauri]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.app
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
